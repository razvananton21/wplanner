# Instructions

During you interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2
Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

Follow the coding style and conventions in the project. Please take a step by step approach to implement the changes.

## 1. Code Consistency & Standards
- Always inspect existing patterns before suggesting changes or additions
  - Check class/interface inheritance patterns
  - Review design patterns in use (Repository, Factory, Strategy, etc.)
  - Observe dependency injection methods
  - Note service method signatures and return types
- Follow established naming conventions in the specific module/component
  - Use consistent casing (PascalCase for classes, camelCase for methods)
  - Follow prefix/suffix patterns (e.g., Interface suffixes)
  - Maintain consistent variable naming patterns
  - Use semantic and descriptive names
- Maintain consistent error handling patterns per module
  - Use module-specific exception classes
  - Follow try-catch patterns
  - Maintain error propagation chains
  - Use consistent error logging levels
- Use existing logging patterns and levels
  - Follow established log level usage (DEBUG, INFO, WARNING, ERROR)
  - Include contextual data in logs
  - Use structured logging format
  - Maintain log message consistency
- Follow established service patterns and dependency injection methods
  - Use constructor injection for required dependencies
  - Follow service registration patterns
  - Maintain service interface contracts
  - Use appropriate service scope (singleton, transient, scoped)
- Respect existing architectural boundaries
  - Follow layered architecture patterns
  - Maintain separation of concerns
  - Use appropriate abstraction levels
  - Follow SOLID principles
- Maintain consistent return types and method signatures
  - Use type declarations consistently
  - Follow nullable type patterns
  - Use consistent array/collection returns
  - Maintain parameter ordering conventions
- Follow existing validation patterns
  - Use consistent validation approaches
  - Apply validation at appropriate layers
  - Follow error message formats
  - Use validation attributes consistently
- Use established testing patterns and methodologies
  - Follow unit test naming conventions
  - Maintain test structure consistency
  - Use consistent mocking patterns
  - Follow assertion style guidelines

## 2. Context Gathering
Before making suggestions or changes:
- Analyze related files and dependencies
  - Check class dependencies and inheritance
  - Review service dependencies
  - Check database relationships
  - Analyze API dependencies
- Understand the module's purpose and boundaries
  - Review module interfaces
  - Check service boundaries
  - Understand data flow
  - Review event handling
- Check for similar implementations elsewhere in the codebase
  - Look for pattern implementations
  - Review similar feature code
  - Check utility functions
  - Review shared components
- Verify technical assumptions against existing code
  - Check type usage
  - Review error handling
  - Verify transaction boundaries
  - Check concurrency handling
- Request specific examples if behavior is unclear
  - Ask for API request/response examples
  - Review data structure samples
  - Check edge case scenarios
  - Verify business rules
- Ask about impact on related systems
  - Check service dependencies
  - Review event subscribers
  - Check API consumers
  - Verify database impact
- Understand specific use cases that need support
  - Review business requirements
  - Check validation rules
  - Understand data constraints
  - Review performance requirements
- Request access to relevant documentation
  - Check API documentation
  - Review technical specs
  - Check architecture diagrams
  - Review database schemas
- Ask for clarification on business rules when needed
  - Verify validation rules
  - Check calculation logic
  - Review workflow rules
  - Understand state transitions

## 3. Incremental Implementation
- Break changes into small, reviewable steps
  - Implement interface changes first
  - Add new methods before modifying existing ones
  - Update tests incrementally
  - Roll out validation changes gradually
- Each change should be independently functional
  - Ensure complete feature slices
  - Maintain working tests
  - Keep backward compatibility
  - Include necessary migrations
- Maintain working state between modifications
  - Use feature flags
  - Implement fallback mechanisms
  - Keep old code paths until ready
  - Use deprecation notices
- Document dependencies between changes
  - Map service dependencies
  - Document class relationships
  - Note database dependencies
  - Track API changes
- Consider migration paths for data and functionality
  - Plan data migrations
  - Handle schema updates
  - Consider state transitions
  - Plan API versioning
- Plan rollback strategies for each change
  - Create database rollbacks
  - Version API endpoints
  - Maintain old interfaces
  - Document reversion steps
- Document each step's validation requirements
  - List validation rules
  - Document edge cases
  - Specify test scenarios
  - Note performance requirements

## 4. Non-Breaking Changes
- Add new methods instead of modifying existing ones
  - Use method overloading
  - Implement interface extensions
  - Create new service methods
  - Add optional parameters
- Use feature flags for major changes
  - Implement toggle mechanisms
  - Use configuration switches
  - Add environment variables
  - Implement A/B testing
- Maintain backward compatibility
  - Keep old method signatures
  - Support legacy data formats
  - Maintain API versions
  - Handle deprecated features
- Support existing data structures
  - Add nullable fields
  - Use default values
  - Maintain indexes
  - Handle schema evolution
- Handle null values for new fields
  - Implement null checks
  - Use null coalescing
  - Add default values
  - Handle optional parameters
- Keep existing method signatures
  - Use optional parameters
  - Implement method overloading
  - Use builder patterns
  - Maintain interface contracts
- Provide migration paths
  - Create data migrations
  - Version APIs
  - Add conversion utilities
  - Document upgrade steps
- Consider existing integrations
  - Check API consumers
  - Review event subscribers
  - Check service dependencies
  - Verify plugin compatibility

## 5. File Structure & Organization
- Verify correct location for new files
  - Follow namespace hierarchy
  - Group by feature/module
  - Maintain consistent directory structure
  - Use appropriate subdirectories
- Follow existing namespace patterns
  - Match namespace to directory structure
  - Use PSR-4 autoloading
  - Maintain vendor namespaces
  - Follow class naming conventions
- Maintain consistent directory structure
  - Separate concerns (controllers, services, etc.)
  - Group related features
  - Organize test files properly
  - Keep configuration organized
- Check similar feature implementations
  - Review related modules
  - Check shared components
  - Review utility classes
  - Check service implementations
- Review related components
  - Check service dependencies
  - Review event listeners
  - Check interface implementations
  - Review trait usage
- Understand module boundaries
  - Check service interfaces
  - Review dependency graph
  - Understand data flow
  - Check event dispatching
- Follow established coding standards
  - Use consistent formatting
  - Follow naming conventions
  - Maintain file structure
  - Use appropriate comments
- Maintain proper autoloading
  - Follow PSR-4 standards
  - Update composer.json
  - Check class mappings
  - Verify namespace resolution
- Consider test file locations
  - Mirror source structure
  - Group related tests
  - Organize test data
  - Maintain test utilities
- Document file purpose and relationships
  - Add file headers
  - Document dependencies
  - Note related files
  - Explain file role

## 6. Error Handling & Logging
- Use appropriate exception types per module
  - Create domain-specific exceptions
  - Extend base exceptions properly
  - Use semantic exception names
  - Follow exception hierarchy
- Log errors with proper context
  - Include stack traces
  - Add request context
  - Log correlation IDs
  - Include user context
- Provide meaningful error messages
  - Use consistent message format
  - Include actionable information
  - Add error codes
  - Provide debugging context
- Handle edge cases consistently
  - Check null values
  - Validate input ranges
  - Handle empty collections
  - Check boundary conditions
- Maintain existing error patterns
  - Follow error propagation
  - Use consistent catch blocks
  - Handle nested exceptions
  - Follow retry patterns
- Consider retry mechanisms
  - Implement exponential backoff
  - Set retry limits
  - Handle transient failures
  - Log retry attempts
- Document error scenarios
  - List possible exceptions
  - Document recovery paths
  - Note side effects
  - Explain error contexts
- Use established logging levels
  - Follow severity guidelines
  - Use appropriate log levels
  - Maintain logging consistency
  - Structure log messages
- Include proper stack traces
  - Filter sensitive data
  - Format stack traces
  - Include relevant frames
  - Add context information
- Add debugging context when needed
  - Include variable state
  - Log method parameters
  - Add timing information
  - Note system state

## 7. Documentation & Comments
- Document public API changes
  - Update API specifications
  - Document request/response formats
  - Note breaking changes
  - Include migration guides
- Update relevant README files
  - Document setup steps
  - List dependencies
  - Include usage examples
  - Note configuration options
- Add PHPDoc blocks for new methods
  - Document parameters
  - Specify return types
  - List thrown exceptions
  - Add usage examples
- Document complex logic
  - Explain algorithms
  - Note edge cases
  - Document assumptions
  - Include performance notes
- Update configuration examples
  - Show common settings
  - Document environment variables
  - Include sample configs
  - Note default values
- Maintain changelog entries
  - List significant changes
  - Note breaking changes
  - Include upgrade steps
  - Document bug fixes
- Document breaking changes
  - List affected components
  - Provide migration steps
  - Note deprecated features
  - Include timeline
- Add migration guides when needed
  - List required steps
  - Include code examples
  - Note potential issues
  - Document rollback steps
- Update API documentation
  - Document endpoints
  - Show request/response examples
  - List error responses
  - Include authentication details
- Include usage examples
  - Show common use cases
  - Provide code snippets
  - Document best practices
  - Include edge cases

## 8. Testing Requirements
- Add unit tests for new functionality
- Update existing tests for changes
- Add integration tests for new features
- Test edge cases and error conditions
- Verify backward compatibility
- Test performance impact
- Add regression tests
- Document test scenarios
- Include test data examples
- Test configuration changes

## 9. Performance Considerations
- Consider memory usage
- Check query efficiency
- Evaluate cache impact
- Consider scalability
- Check batch processing efficiency
- Evaluate concurrent access
- Consider distributed systems impact
- Consider API call frequency
- Consider database load

## 10. Security Practices
- Follow existing security patterns
- Validate input consistently
- Use proper encryption methods
- Handle sensitive data appropriately
- Follow authentication patterns
- Use authorization checks
- Sanitize output
- Handle API keys securely
- Follow CSRF protection patterns
- Implement rate limiting

## 11. Dependency Management
- Check compatibility with existing dependencies
- Consider version constraints
- Evaluate security implications
- Document new dependencies
- Consider alternative implementations
- Check license compatibility
- Evaluate maintenance status
- Consider dependency size
- Check for conflicts
- Document version requirements

## 12. Code Review Guidelines
- Verify consistency with existing code
- Check for potential side effects
- Review security implications
- Verify error handling
- Check performance impact
- Review documentation
- Verify test coverage
- Check backward compatibility
- Review logging adequacy
- Verify configuration changes

## 13. Context Questions
Always ask for clarification when:
- Business requirements are unclear
- Technical constraints are ambiguous
- Integration points are undefined
- Performance requirements are not specified
- Security requirements are unclear
- Compliance needs are not stated
- Migration paths are undefined
- Testing requirements are unclear
- Documentation needs are not specified
- Monitoring requirements are not defined

## 14. Implementation Strategy
Before making changes:
- Analyze impact on existing functionality
- Plan incremental changes
- Consider rollback strategies
- Document dependencies
- Plan testing approach
- Consider performance impact
- Evaluate security implications
- Plan documentation updates
- Consider monitoring needs
- Plan deployment strategy

## 15. Maintenance Considerations
- Consider long-term maintainability
- Document technical debt
- Plan for future extensions
- Consider upgrade paths
- Document known limitations
- Plan for deprecations
- Consider backward compatibility
- Document breaking changes
- Plan migration strategies
- Consider support requirements 

## 16. Technology Stack & Versions
- PHP 8.1+
  - Strict types enabled
  - Attributes support
  - Constructor property promotion
  - Named arguments
  - Match expressions

- Symfony Framework 6.x
  - Doctrine ORM
  - Symfony DI (Dependency Injection)
  - Symfony Console
  - Symfony Messenger

- Microsoft Graph API
  - Microsoft Graph SDK for PHP
  - OAuth 2.0 authentication
  - Microsoft 365 Calendar integration

- Laravel Collections
  - Used for data manipulation
  - Array handling
  - Collection pipelines

- Database
  - MySQL 5.7
  - Doctrine Migrations
  - Prepared statements
  - Encryption support

- Development Tools
  - PHPUnit for testing
  - PHP CS Fixer
  - PHPStan for static analysis
  - Xdebug for debugging

- Infrastructure
  - Queue system for async processing
  - Encryption provider for sensitive data
  - Windows timezone handling
  - Logging system with context

- Frontend Integration
  - React
  - Build System
    - Vite
  - API Integration
    - REST API endpoints
    - JSON response format
    - CORS handling
    - API versioning
  - Code Quality
    - JSHint configuration
    - Strict mode enabled
    - Code complexity limits
    - Style guidelines enforced

## 17. Coding Style & Conventions
- PSR-12 coding standards
- Type declarations required
- Return type declarations required
- Constructor property promotion preferred
- Attributes for metadata
- Immutable objects when possible
- Repository pattern for data access
- Service layer for business logic
- DTO pattern for data transfer
- Interface segregation principle
- Dependency injection
- Command/Query separation 



Lessons:
- 

Scratchpad:

Task: Implement tasks screen with new design patterns
Based on analysis of GuestList, WeddingDetails, and other pages, we need to:

[X] Plan implementation steps
[X] Create TasksPage component with new layout
[X] Update TaskList component styling
[X] Update TaskForm component styling
[X] Add task filtering and sorting with new design
[X] Implement task categories with visual improvements
[X] Add task status indicators and progress tracking
[X] Implement drag-and-drop with new styling

Implementation Details:
1. TasksPage Component
- Header with back button and title (like EditWeddingPage)
- Task statistics/progress overview
- Filter/sort controls with new design
- Main content area with TaskList

2. TaskList Updates
- Card-based layout with consistent styling
- Status indicators with proper colors
- Category chips with icons
- Priority indicators
- Due date display
- Drag handle styling

3. TaskForm Updates
- Modal design matching other forms
- Consistent input styling
- Category selector with icons
- Priority selector with colors
- Date picker styling

4. Visual Improvements
- Use theme colors and gradients
- Consistent spacing and typography
- Proper animations and transitions
- Loading states and error handling

Progress:
- Completed implementation of TasksPage with new design
- Updated TaskList with new card-based layout and styling
- Updated TaskForm with consistent form design
- Added route in App.jsx
- All components now follow the new design patterns

Next Steps:
- Test the implementation
- Gather feedback
- Make any necessary adjustments

# Scratchpad: Budget Cards Debug

## Task
Debug why the budget cards are not showing the necessary data in the BudgetOverview component.

## Analysis Steps
[ ] Check the API response structure
[ ] Verify the wedding ID is being passed correctly
[ ] Analyze the data transformation in the component
[ ] Check if the expenses data is being received correctly
[ ] Verify the calculations for each card

## Current State
- Budget object is being received
- Wedding ID is available in budget.wedding.id
- Expenses are being fetched but might not be processed correctly

## Lessons
- Always verify the API response structure matches what the component expects
- Add proper logging for debugging data flow
- Check both the frontend calculations and backend summary